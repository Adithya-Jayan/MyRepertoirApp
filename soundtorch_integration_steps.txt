## Pending Tasks for SoundTouch Integration

**Overall Goal:** Successfully integrate the SoundTouch native library for pitch shifting into the Flutter application, resolving all build and runtime errors.

---

### Task 1: Re-apply Header Fixes in `temp_soundtouch`

**Reason:** The `BOOL` and `uint` type errors, along with `TRUE`/`FALSE` macro issues, keep recurring because the `temp_soundtouch` directory is re-cloned, reverting these necessary changes. These types/macros are not standard in the NDK build environment, and the SoundTouch library's C++ code relies on them.

**Goal:** Ensure `SoundTouch.h`, `STTypes.h`, `RateTransposer.h`, `RateTransposer.cpp`, `TDStretch.h`, and `TDStretch.cpp` within the `temp_soundtouch` directory have the correct type definitions and macro replacements (`BOOL` to `bool`, `uint` to `unsigned int`, `TRUE` to `true`, `FALSE` to `false`). This will allow the native code to compile without type-related errors.

**Steps:**
1.  Modify `SoundTouch.h`: Add `#define BOOL bool`
2.  Modify `STTypes.h`: Add `typedef unsigned int uint;` and `#define TRUE true`, `#define FALSE false`
3.  Modify `RateTransposer.h`: Replace `BOOL` with `bool` in declarations.
4.  Modify `RateTransposer.cpp`: Replace `BOOL` with `bool` and `TRUE`/`FALSE` with `true`/`false`.
5.  Modify `TDStretch.h`: Replace `BOOL` with `bool` in declarations.
6.  Modify `TDStretch.cpp`: Replace `BOOL` with `bool` and `TRUE`/`FALSE` with `true`/`false`.

---

### Task 2: Re-run `ndk-build`

**Reason:** After applying the header fixes, the native SoundTouch library needs to be recompiled to incorporate these changes.

**Goal:** Successfully compile the `libsoundtouch.so` for all target ABIs (`armeabi-v7a`, `arm64-v8a`, `x86`, `x86_64`) without compilation errors.

**Steps:**
1.  Navigate to `C:\Users\adith\Documents\Code\MyRepertoirApp\Repertoire\temp_soundtouch\source\Android-lib\jni`.
2.  Execute `C:\Users\adith\AppData\Local\Android\Sdk\ndk\26.3.11579264\ndk-build.cmd`.

---

### Task 3: Copy Generated Native Libraries

**Reason:** The successfully built `libsoundtouch.so` files need to be moved from the temporary build directory (`temp_soundtouch/source/Android-lib/libs`) to the Flutter project's native libraries directory (`android/app/src/main/jniLibs`).

**Goal:** Ensure the compiled `libsoundtouch.so` files for all ABIs are correctly placed in the Flutter project's `jniLibs` directory, making them available for packaging into the APK.

**Steps:**
1.  Copy `libsoundtouch.so` from `temp_soundtouch/source/Android-lib/libs/armeabi-v7a/` to `android/app/src/main/jniLibs/armeabi-v7a/`.
2.  Copy `libsoundtouch.so` from `temp_soundtouch/source/Android-lib/libs/arm64-v8a/` to `android/app/src/main/jniLibs/arm64-v8a/`.
3.  Copy `libsoundtouch.so` from `temp_soundtouch/source/Android-lib/libs/x86/` to `android/app/src/main/jniLibs/x86/`.
4.  Copy `libsoundtouch.so` from `temp_soundtouch/source/Android-lib/libs/x86_64/` to `android/app/src/main/jniLibs/x86_64/`.

---

### Task 4: Copy `SoundTouch.h`

**Reason:** The `SoundTouch.h` header file, which defines the SoundTouch API, needs to be available in the Flutter project's `cpp` directory for the JNI wrapper (`soundtouch_jni.cpp`) to compile correctly.

**Goal:** Replace the placeholder `SoundTouch.h` with the actual header file from the SoundTouch source, ensuring the JNI C++ code can correctly interface with the SoundTouch library.

**Steps:**
1.  Copy `SoundTouch.h` from `C:\Users\adith\Documents\Code\MyRepertoirApp\Repertoire\temp_soundtouch\include\SoundTouch.h` to `C:\Users\adith\Documents\Code\MyRepertoirApp\Repertoire\android\app\src\main\cpp\SoundTouch.h`.

---

### Task 5: Delete Temporary Repository

**Reason:** To clean up the workspace and remove the temporary SoundTouch source code and build artifacts.

**Goal:** Remove the `temp_soundtouch` directory and its contents. (Do this only after the app is verified to be functional)

**Steps:**
1.  Execute `rmdir /s /q C:\Users\adith\Documents\Code\MyRepertoirApp\Repertoire\temp_soundtouch`.

---

### Task 6: Run Flutter Application

**Reason:** To verify that all native and Dart-side changes are correctly integrated and that the application runs without `UnsatisfiedLinkError` or other crashes, and that the pitch shifting functionality works.

**Goal:** The Flutter application launches successfully on the Android device, and the pitch shifting feature functions as intended.

**Steps:**
1.  Execute `flutter run -d 38191FDJH00CWL` (using the correct device ID).

---

### Current Issue & Approach for Real-time Pitch Shifting

**Original Problem:** Pitch shifting worked only after stopping and re-playing audio; changes made during playback were not reflected.

**Attempted Fix 1:**
*   **Action:** Added `soundTouch->clear();` in `soundtouch_jni.cpp` after `setPitchSemiTones` to clear SoundTouch's internal buffers, hoping to force immediate application of new pitch settings.
*   **Observed Issue:** Pitch shifting became completely non-functional, even after stopping and re-playing. Audio also started from the beginning on pause/play. This indicated `clear()` was too aggressive and disrupted the audio stream.

**Current Problem:**
*   After reverting the `soundTouch->clear()` change and refactoring to use `StreamAudioSource` with raw PCM float data, the app now builds and runs. However, `just_audio` (ExoPlayer) throws an `UnrecognizedInputFormatException`.
*   **Reason:** `just_audio`'s `StreamAudioSource` expects a recognized *encoded* audio format (like WAV, MP3, FLAC), not raw PCM float data directly, even with `contentType: 'audio/raw'`. It lacks a built-in extractor for raw PCM float streams.

**Current Approach: Encode to WAV (PCM 16-bit) on the fly**W
To make the processed audio stream compatible with `just_audio`'s existing extractors, we will:
1.  **Modify Native Code (Kotlin/C++):** Change SoundTouch to output 16-bit signed integers (PCM) instead of 32-bit floats. This will involve adjusting the data types and conversions in `PitchShiftProcessor.kt` and `soundtouch_jni.cpp`.
2.  **Modify `SoundTouchAudioSource.dart`:**
    *   Prepend a standard WAV header to the beginning of the audio stream. This header will describe the raw PCM 16-bit audio data (sample rate, channels, bit depth).
    *   Stream the WAV header followed by the processed 16-bit PCM audio data to `just_audio`.

This approach leverages `just_audio`'s robust WAV extractor, making the integration more reliable.