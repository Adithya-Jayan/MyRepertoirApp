name: Nightly Build

on:
  schedule:
    - cron: '30 16 * * *' # 16:30 UTC daily (10:00 PM IST)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  nightly:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine last nightly reference
        id: last
        run: |
          git fetch --tags --force
          LAST_NIGHTLY_TAG=$(git tag --list 'nightly-*' --sort=-creatordate | head -n1)
          echo "last_tag=$LAST_NIGHTLY_TAG" >> $GITHUB_OUTPUT

      - name: Check if changes since last nightly
        id: changes
        run: |
          set -e
          DEFAULT_BRANCH="main"
          if [ -z "${{ steps.last.outputs.last_tag }}" ]; then
            echo "no_last=true" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            RANGE="${{ steps.last.outputs.last_tag }}..origin/$DEFAULT_BRANCH"
            if git rev-list --count "$RANGE" | grep -q '^[1-9]'; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Respect previous status when no changes (scheduled runs only)
        if: steps.changes.outputs.has_changes == 'false' && github.event_name == 'schedule'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "No changes since last nightly. Checking previous nightly run status..."
          # Fetch the last completed run for this workflow on main
          LAST_CONCLUSION=$(gh run list \
            --workflow nightly.yml \
            --branch main \
            --status completed \
            --limit 1 \
            --json conclusion \
            --jq '.[0].conclusion')
          echo "Last nightly conclusion: ${LAST_CONCLUSION:-unknown}"
          if [ "$LAST_CONCLUSION" = "failure" ]; then
            echo "Previous nightly failed and there are no new changes. Failing this run to preserve status."
            exit 1
          fi
          echo "Previous nightly succeeded (or unknown). Skipping build successfully."
          exit 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.1'
          channel: 'stable'

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Compute nightly build metadata
        id: meta
        run: |
          BRANCH="main"
          SHORT_SHA=$(git rev-parse --short HEAD)
          DATE=$(date -u +"%Y%m%d")
          RUN_NUMBER=${GITHUB_RUN_NUMBER}
          # Nightly tag is unique per run to avoid collisions between manual and scheduled runs
          TAG="nightly-${DATE}-${SHORT_SHA}-r${RUN_NUMBER}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "build_name=$TAG" >> $GITHUB_OUTPUT

      - name: Update version in pubspec.yaml (nightly)
        run: |
          VERSION="0.0.0-${{ steps.meta.outputs.build_name }}"
          yq -i ".version = \"$VERSION\"" pubspec.yaml
          echo "Updated pubspec.yaml to nightly version $VERSION"

      - name: Decode Keystore
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/my-release-key.jks

      - name: Create key.properties
        run: |
          echo "storeFile=../my-release-key.jks" > android/key.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties

      - name: Build Nightly Artifacts
        run: |
          BUILD_NAME="${{ steps.meta.outputs.build_name }}"
          flutter pub get
          flutter build apk --flavor nightly --release --build-name="$BUILD_NAME"
          flutter build appbundle --flavor nightly --release --build-name="$BUILD_NAME"
          flutter build web --release --build-name="$BUILD_NAME"

      - name: Verify APK Signature
        run: |
          APKSIGNER_PATH=$(find $ANDROID_SDK_ROOT/build-tools -name "apksigner" | sort -r | head -n 1)
          $APKSIGNER_PATH verify --print-certs build/app/outputs/flutter-apk/app-nightly-release.apk

      - name: Package Nightly Assets
        run: |
          mkdir -p nightly_assets
          cp build/app/outputs/flutter-apk/app-nightly-release.apk nightly_assets/app-nightly.apk
          cp build/app/outputs/bundle/nightlyRelease/app-nightly-release.aab nightly_assets/app-nightly.aab
          cp -r build/web nightly_assets/web_build
          cd nightly_assets
          zip -r web_build.zip web_build/
          cd ..

      - name: Generate Nightly Checksums
        run: |
          cd nightly_assets
          sha256sum app-nightly.apk > app-nightly.apk.sha256
          sha256sum app-nightly.aab > app-nightly.aab.sha256
          cd ..
          
      - name: Setup SSH Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ACTIONS_DEPLOY_KEY }}

      - name: Create/Update rolling Nightly release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # Create or update a rolling release named "nightly" and tag "nightly"
          if gh release view nightly >/dev/null 2>&1; then
            gh release delete nightly -y || true
          fi
          # Recreate the nightly release pointing to the default branch HEAD
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -f nightly
          git push -f origin nightly
          gh release create nightly \
            --title "Nightly Build" \
            --notes "Automated nightly build. Tag: ${{ steps.meta.outputs.tag }}" \
            --prerelease \
            --target main \
            nightly_assets/app-nightly.apk \
            nightly_assets/app-nightly.aab \
            nightly_assets/web_build.zip \
            nightly_assets/app-nightly.apk.sha256 \
            nightly_assets/app-nightly.aab.sha256

      - name: Add immutable nightly tag for traceability
        run: |
          TAG_NAME="${{ steps.meta.outputs.tag }}"
          if git rev-parse -q --verify "refs/tags/${TAG_NAME}" >/dev/null; then
            echo "Immutable nightly tag ${TAG_NAME} already exists. Skipping creation."
          else
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git tag -a "${TAG_NAME}" -m "Nightly build ${TAG_NAME}"
            git push origin "${TAG_NAME}"
          fi

      - name: Success message
        run: echo "Nightly build ${{ steps.meta.outputs.tag }} published."


