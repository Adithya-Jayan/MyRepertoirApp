name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type to create'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Mark as prerelease? (Creates an incremental prerelease version for next patch/minor/major version)'
        required: false
        type: boolean
        default: false
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
        default: ''

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.1'
          channel: 'stable'

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Get latest version tag
        id: get_latest_tag
        run: |
          git fetch --tags
          LATEST_OFFICIAL_TAG=$(git tag --list 'v*' --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+(\+[0-9]+)?$' | head -n1)
          echo "latest_tag=$LATEST_OFFICIAL_TAG" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: version_calc
        run: |
          # Get current full version from pubspec.yaml (e.g., "3.1.4+1")
          CURRENT_FULL_VERSION=$(yq '.version' pubspec.yaml)
          # Extract semantic version part (e.g., "3.1.4")
          CURRENT_SEMANTIC_VERSION=$(echo "$CURRENT_FULL_VERSION" | cut -d'+' -f1)
          # Strip any prerelease identifiers to get a clean base version
          CURRENT_SEMANTIC_VERSION=$(echo "$CURRENT_SEMANTIC_VERSION" | sed 's/-.*//')
          # Extract build number part (e.g., "1")
          CURRENT_BUILD_NUMBER=$(echo "$CURRENT_FULL_VERSION" | cut -d'+' -f2)
          
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          PRERELEASE="${{ github.event.inputs.prerelease }}"
          
          bump_version() {
            local version=$1
            local type=$2
            IFS='.' read -r MAJOR MINOR PATCH <<< "$version"
            case $type in
              major)
                MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
              minor)
                MINOR=$((MINOR + 1)); PATCH=0 ;;
              patch)
                PATCH=$((PATCH + 1)) ;;
            esac
            echo "$MAJOR.$MINOR.$PATCH"
          }
          
          if [ "$PRERELEASE" = "true" ]; then
            BASE_VERSION=$(bump_version "$CURRENT_SEMANTIC_VERSION" "$RELEASE_TYPE")
            EXISTING_PRERELEASE=$(git tag --list "v${BASE_VERSION}-prerelease.*" | grep -E "^v${BASE_VERSION}-prerelease\.[0-9]+" | sort -V | tail -n1)
            if [ -n "$EXISTING_PRERELEASE" ]; then
              PRERELEASE_NUM=$(echo "$EXISTING_PRERELEASE" | sed -E 's/.*-prerelease\.([0-9]+)$/\1/')
              PRERELEASE_NUM=$((PRERELEASE_NUM + 1))
            else
              PRERELEASE_NUM=1
            fi
            NEW_VERSION_NAME="$BASE_VERSION-prerelease.$PRERELEASE_NUM"
          else
            NEW_VERSION_NAME=$(bump_version "$CURRENT_SEMANTIC_VERSION" "$RELEASE_TYPE")
          fi
          
          NEW_BUILD_NUMBER=$((CURRENT_BUILD_NUMBER + 1))
          
          echo "VERSION_NAME=${NEW_VERSION_NAME}" >> $GITHUB_OUTPUT
          echo "BUILD_NUMBER=${NEW_BUILD_NUMBER}" >> $GITHUB_OUTPUT
          echo "CURRENT_VERSION=${CURRENT_SEMANTIC_VERSION}" >> $GITHUB_OUTPUT
          echo "RELEASE_TYPE=${RELEASE_TYPE}" >> $GITHUB_OUTPUT

      - name: Determine Final Version String
        id: final_version
        run: |
          VERSION_NAME="${{ steps.version_calc.outputs.VERSION_NAME }}"
          BUILD_NUMBER="${{ steps.version_calc.outputs.BUILD_NUMBER }}"
          FINAL_VERSION_STRING="${VERSION_NAME}+${BUILD_NUMBER}"
          echo "final_version_string=$FINAL_VERSION_STRING" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Update version in pubspec.yaml
        run: |
          FINAL_VERSION_STRING="${{ steps.final_version.outputs.final_version_string }}"
          yq -i ".version = \"$FINAL_VERSION_STRING\"" pubspec.yaml
          echo "Updated pubspec.yaml to version $FINAL_VERSION_STRING"

      - name: Decode Keystore
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/my-release-key.jks

      - name: Create key.properties
        run: |
          echo "storeFile=../my-release-key.jks" > android/key.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties

      - name: Install dependencies
        run: flutter pub get

      - name: Build All Platforms
        run: |
          BUILD_NAME="${{ steps.version_calc.outputs.VERSION_NAME }}"
          BUILD_NUMBER="${{ steps.final_version.outputs.build_number }}"
          
          # --- Build armeabi-v7a ---
          echo "Building APK for armeabi-v7a"
          flutter build apk --flavor fdroid --release \
            --split-per-abi \
            --target-platform=android-arm \
            --build-name="$BUILD_NAME" \
            --build-number="$BUILD_NUMBER"
          
          # --- Build arm64-v8a ---
          echo "Building APK for arm64-v8a"
          flutter build apk --flavor fdroid --release \
            --split-per-abi \
            --target-platform=android-arm64 \
            --build-name="$BUILD_NAME" \
            --build-number="$BUILD_NUMBER"
          
          # --- Build x86_64 ---
          echo "Building APK for x86_64"
          flutter build apk --flavor fdroid --release \
            --split-per-abi \
            --target-platform=android-x64 \
            --build-name="$BUILD_NAME" \
            --build-number="$BUILD_NUMBER"

          # Build App Bundle
          echo "Building App Bundle"
          flutter build appbundle --flavor fdroid --release --build-name="$BUILD_NAME" --build-number="$BUILD_NUMBER"
          
          # Build Web
          echo "Building Web"
          flutter build web --release --build-name="$BUILD_NAME" --build-number="$BUILD_NUMBER"
          
      - name: Verify APK Versions
        run: |
          AAPT2_PATH=$(find $ANDROID_SDK_ROOT/build-tools -name "aapt2" | sort -r | head -n 1)
          if [ -z "$AAPT2_PATH" ]; then
            echo "aapt2 not found!"
            exit 1
          fi
          # Expected values
          EXPECTED_BUILD_NAME="${{ steps.version_calc.outputs.VERSION_NAME }}"
          BUILD_NUMBER="${{ steps.final_version.outputs.build_number }}"
          EXPECTED_VC_V7A=$((BUILD_NUMBER + 1000))
          EXPECTED_VC_V8A=$((BUILD_NUMBER + 2000))
          EXPECTED_VC_X64=$((BUILD_NUMBER + 3000))
          # --- Verify armeabi-v7a ---
          APK_PATH_V7A="build/app/outputs/flutter-apk/app-armeabi-v7a-fdroid-release.apk"
          echo "Verifying $APK_PATH_V7A"
          ACTUAL_VERSION_NAME=$($AAPT2_PATH dump badging "$APK_PATH_V7A" | grep "versionName" | sed "s/.*versionName='\([^']*\)'.*/\1/")
          ACTUAL_VERSION_CODE=$($AAPT2_PATH dump badging "$APK_PATH_V7A" | grep "versionCode" | sed "s/.*versionCode='\([^']*\)'.*/\1/")
          echo "Expected Version Name: $EXPECTED_BUILD_NAME, Actual: $ACTUAL_VERSION_NAME"
          echo "Expected Version Code: $EXPECTED_VC_V7A, Actual: $ACTUAL_VERSION_CODE"
          if [ "$ACTUAL_VERSION_NAME" != "$EXPECTED_BUILD_NAME" ] || [ "$ACTUAL_VERSION_CODE" != "$EXPECTED_VC_V7A" ]; then
            echo "Version mismatch for armeabi-v7a!"
            exit 1
          fi
          # --- Verify arm64-v8a ---
          APK_PATH_V8A="build/app/outputs/flutter-apk/app-arm64-v8a-fdroid-release.apk"
          echo "Verifying $APK_PATH_V8A"
          ACTUAL_VERSION_NAME=$($AAPT2_PATH dump badging "$APK_PATH_V8A" | grep "versionName" | sed "s/.*versionName='\([^']*\)'.*/\1/")
          ACTUAL_VERSION_CODE=$($AAPT2_PATH dump badging "$APK_PATH_V8A" | grep "versionCode" | sed "s/.*versionCode='\([^']*\)'.*/\1/")
          echo "Expected Version Name: $EXPECTED_BUILD_NAME, Actual: $ACTUAL_VERSION_NAME"
          echo "Expected Version Code: $EXPECTED_VC_V8A, Actual: $ACTUAL_VERSION_CODE"
          if [ "$ACTUAL_VERSION_NAME" != "$EXPECTED_BUILD_NAME" ] || [ "$ACTUAL_VERSION_CODE" != "$EXPECTED_VC_V8A" ]; then
            echo "Version mismatch for arm64-v8a!"
            exit 1
          fi
          # --- Verify x86_64 ---
          APK_PATH_X64="build/app/outputs/flutter-apk/app-x86_64-fdroid-release.apk"
          echo "Verifying $APK_PATH_X64"
          ACTUAL_VERSION_NAME=$($AAPT2_PATH dump badging "$APK_PATH_X64" | grep "versionName" | sed "s/.*versionName='\([^']*\)'.*/\1/")
          ACTUAL_VERSION_CODE=$($AAPT2_PATH dump badging "$APK_PATH_X64" | grep "versionCode" | sed "s/.*versionCode='\([^']*\)'.*/\1/")
          echo "Expected Version Name: $EXPECTED_BUILD_NAME, Actual: $ACTUAL_VERSION_NAME"
          echo "Expected Version Code: $EXPECTED_VC_X64, Actual: $ACTUAL_VERSION_CODE"
          if [ "$ACTUAL_VERSION_NAME" != "$EXPECTED_BUILD_NAME" ] || [ "$ACTUAL_VERSION_CODE" != "$EXPECTED_VC_X64" ]; then
            echo "Version mismatch for x86_64!"
            exit 1
          fi
          echo "All APK versions verified successfully."

      - name: Verify Signatures
        run: |
          # Verify APKs
          APKSIGNER_PATH=$(find $ANDROID_SDK_ROOT/build-tools -name "apksigner" | sort -r | head -n 1)
          APKS_TO_VERIFY=$(find build/app/outputs/flutter-apk -name "app-*-fdroid-release.apk")
          if [ -z "$APKS_TO_VERIFY" ]; then
            echo "No APKs found to verify."
            exit 1
          fi
          for apk in $APKS_TO_VERIFY; do
            echo "Verifying $apk"
            $APKSIGNER_PATH verify --print-certs "$apk"
          done
          
          # Verify App Bundle
          echo "Verifying App Bundle"
          jarsigner -verify -certs build/app/outputs/bundle/fdroidRelease/app-fdroid-release.aab

      - name: Create Release Assets
        run: |
          mkdir -p release_assets
          find build/app/outputs/flutter-apk -name "app-*-fdroid-release.apk" -exec cp {} release_assets/ \;
          cp build/app/outputs/bundle/fdroidRelease/app-fdroid-release.aab release_assets/
          cp -r build/web release_assets/web_build
          
          cd release_assets
          zip -r web_build.zip web_build/
          cd ..

      - name: Generate Checksums
        run: |
          cd release_assets
          APKS_TO_CHECKSUM=$(find . -name "app-*-fdroid-release.apk")
          if [ -n "$APKS_TO_CHECKSUM" ]; then
            for apk in $APKS_TO_CHECKSUM; do
              sha256sum "$apk" > "$apk.sha256"
            done
          fi
          sha256sum app-fdroid-release.aab > app-fdroid-release.aab.sha256
          cd ..
      
      - name: Setup SSH Key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ACTIONS_DEPLOY_KEY }}

      - name: Create Git Tag and Push Changes
        run: |
          TAG_NAME="v${{ steps.final_version.outputs.final_version_string }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml
          COMMIT_MSG="Release version $TAG_NAME"
          git commit -m "$COMMIT_MSG"
          git tag -a "$TAG_NAME" -m "$COMMIT_MSG"
          git push origin ${{ github.ref_name }}
          git push origin "$TAG_NAME"

      - name: Get Build Date
        id: get_build_date
        run: |
          echo "build_date=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Create Draft Release and Get Notes
        id: create_draft_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ steps.final_version.outputs.final_version_string }} \
            --generate-notes \
            --notes-start-tag ${{ steps.get_latest_tag.outputs.latest_tag }} \
            --title "Release v${{ steps.final_version.outputs.final_version_string }}" \
            --draft \
            --prerelease=${{ github.event.inputs.prerelease }}
          
          NOTES=$(gh release view v${{ steps.final_version.outputs.final_version_string }} --json body --jq .body)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create F-Droid Changelog
        run: |
          VERSION_CODE="${{ steps.final_version.outputs.build_number }}"
          NOTES="${{ steps.create_draft_release.outputs.notes }}"
          mkdir -p Repertoire/fastlane/metadata/android/en-US/changelogs
          echo "$NOTES" > "fastlane/metadata/android/en-US/changelogs/${VERSION_CODE}.txt"

      - name: Delete Draft Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete v${{ steps.final_version.outputs.final_version_string }} --yes

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.final_version.outputs.final_version_string }}
          body: |
            ${{ github.event.inputs.release_notes }}

            <details>
            <summary>Release Details</summary>
            
            **Release Type:** ${{ steps.version_calc.outputs.RELEASE_TYPE }}
            **Version Name:** ${{ steps.version_calc.outputs.VERSION_NAME }}
            **Build Number:** ${{ steps.final_version.outputs.build_number }}
            **Previous Version:** ${{ steps.version_calc.outputs.CURRENT_VERSION }}
            
            ### Build Information
            - Flutter Version: 3.32.5
            - Build Date: ${{ steps.get_build_date.outputs.build_date }}
            </details>

            **Changes:**
            ${{ steps.create_draft_release.outputs.notes }}
          files: |
            ./release_assets/app-*-fdroid-release.apk
            ./release_assets/app-*-fdroid-release.apk.sha256
            ./release_assets/app-fdroid-release.aab
            ./release_assets/web_build.zip
            ./release_assets/app-fdroid-release.aab.sha256
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}

      - name: Success Message
        run: |
          FINAL_VERSION_STRING="${{ steps.final_version.outputs.final_version_string }}"
          if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            echo "🎉 Successfully created prerelease v${FINAL_VERSION_STRING}!"
            echo "📱 Android APK and App Bundle created"
            echo "🌐 Web build created"
            echo "🏷️  Git tag v${FINAL_VERSION_STRING} created"
            echo "📦 Prerelease GitHub release created"
          else
            echo "🎉 Successfully released version v${FINAL_VERSION_STRING}!"
            echo "📱 Android APK and App Bundle created"
            echo "🌐 Web build created"
            echo "🏷️  Git tag v${FINAL_VERSION_STRING} created"
            echo "📦 Official GitHub release created"
          fi