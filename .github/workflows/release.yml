name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type to create'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Mark as prerelease? (Creates an incremental prerelease version for next patch/minor/major version)'
        required: false
        type: boolean
        default: false
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
        default: ''

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5'
          channel: 'stable'

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Get current version and calculate new version
        id: version_calc
        run: |
          # Fetch all tags
          git fetch --tags
          
          # Find the latest official release tag (vX.Y.Z)
          LATEST_OFFICIAL_TAG=$(git tag --list 'v*' --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)
          LATEST_OFFICIAL_VERSION=${LATEST_OFFICIAL_TAG#v}
          
          # Find the latest prerelease tag for the next version (vX.Y.Z-prerelease.N)
          LATEST_PRERELEASE_TAG=$(git tag --list 'v*' --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+-prerelease\.[0-9]+$' | head -n1)
          LATEST_PRERELEASE_VERSION=${LATEST_PRERELEASE_TAG#v}
          
          # Parse dropdown and prerelease input
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          PRERELEASE="${{ github.event.inputs.prerelease }}"
          
          # Helper to bump version
          bump_version() {
            local version=$1
            local type=$2
            IFS='.' read -r MAJOR MINOR PATCH <<< "$version"
            case $type in
              major)
                MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
              minor)
                MINOR=$((MINOR + 1)); PATCH=0 ;;
              patch)
                PATCH=$((PATCH + 1)) ;;
            esac
            echo "$MAJOR.$MINOR.$PATCH"
          }
          
          if [ "$PRERELEASE" = "true" ]; then
            # Prerelease logic
            BASE_VERSION=$(bump_version "$LATEST_OFFICIAL_VERSION" "$RELEASE_TYPE")
            # Find the highest prerelease number for this base version
            EXISTING_PRERELEASE=$(git tag --list "v${BASE_VERSION}-prerelease.*" | grep -E "^v${BASE_VERSION}-prerelease\.[0-9]+" | sort -V | tail -n1)
            if [ -n "$EXISTING_PRERELEASE" ]; then
              PRERELEASE_NUM=$(echo "$EXISTING_PRERELEASE" | sed -E 's/.*-prerelease\.([0-9]+)$/\1/')
              PRERELEASE_NUM=$((PRERELEASE_NUM + 1))
            else
              PRERELEASE_NUM=1
            fi
            NEW_VERSION_NAME="$BASE_VERSION-prerelease.$PRERELEASE_NUM"
          else
            # Official release logic
            # Bump from latest official
            NEW_VERSION_NAME=$(bump_version "$LATEST_OFFICIAL_VERSION" "$RELEASE_TYPE")
          fi
          
          echo "VERSION_NAME=${NEW_VERSION_NAME}" >> $GITHUB_OUTPUT
          echo "CURRENT_VERSION=${LATEST_OFFICIAL_VERSION}" >> $GITHUB_OUTPUT
          echo "RELEASE_TYPE=${RELEASE_TYPE}" >> $GITHUB_OUTPUT

      - name: Determine Final Version String
        id: final_version
        run: |
          VERSION_NAME="${{ steps.version_calc.outputs.VERSION_NAME }}"
          BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///g')

          if [ "$BRANCH_NAME" != "main" ]; then
            VERSION_NAME="${VERSION_NAME}-${BRANCH_NAME}"
          fi

          # Determine the suffix for the version string (e.g., +1, +2)
          VERSION_SUFFIX=""
          # This will be the value passed to --build-number. It will be empty if no build number is needed.
          BUILD_NUMBER_FOR_FLUTTER=""

          # Check if the base tag (without +build_number) already exists
          if git tag --list "v${VERSION_NAME}" | grep -q "v${VERSION_NAME}"; then
            # If the base tag exists, we need to find the next incremental build number
            LATEST_BUILD_TAG=$(git tag --list "v${VERSION_NAME}+*" --sort=-v:refname | head -n1)
            INCREMENTAL_BUILD_NUM=1
            if [ -n "$LATEST_BUILD_TAG" ]; then
              # Extract the existing build number and increment it
              EXISTING_BUILD_NUM=$(echo "$LATEST_BUILD_TAG" | sed -E 's/.*\+([0-9]+)$/\1/')
              INCREMENTAL_BUILD_NUM=$((EXISTING_BUILD_NUM + 1))
            fi
            BUILD_NUMBER_FOR_FLUTTER="$INCREMENTAL_BUILD_NUM"
            VERSION_SUFFIX="+"$INCREMENTAL_BUILD_NUM
          fi

          FINAL_VERSION_STRING="${VERSION_NAME}${VERSION_SUFFIX}"

          echo "final_version_string=$FINAL_VERSION_STRING" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER_FOR_FLUTTER" >> $GITHUB_OUTPUT

      - name: Update version in pubspec.yaml
        run: |
          FINAL_VERSION_STRING="${{ steps.final_version.outputs.final_version_string }}"
          yq -i ".version = \"$FINAL_VERSION_STRING\"" pubspec.yaml
          echo "Updated pubspec.yaml to version $FINAL_VERSION_STRING"

      - name: Decode Keystore
        run: echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/my-release-key.jks

      - name: Create key.properties
        run: |
          echo "storeFile=my-release-key.jks" > android/key.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties

      - name: Build All Platforms
        run: |
          BUILD_NAME="${{ steps.final_version.outputs.final_version_string }}"
          BUILD_NUMBER="${{ steps.final_version.outputs.build_number }}"

          FLUTTER_BUILD_NUMBER_ARG=""
          if [ -n "$BUILD_NUMBER" ]; then
            FLUTTER_BUILD_NUMBER_ARG="--build-number=$BUILD_NUMBER"
          fi

          flutter build apk --release --build-name="$BUILD_NAME" $FLUTTER_BUILD_NUMBER_ARG
          flutter build appbundle --release --build-name="$BUILD_NAME" $FLUTTER_BUILD_NUMBER_ARG
          flutter build web --release --build-name="$BUILD_NAME" $FLUTTER_BUILD_NUMBER_ARG

      - name: Create Release Assets
        run: |
          mkdir -p release_assets
          cp build/app/outputs/flutter-apk/app-release.apk release_assets/
          cp build/app/outputs/bundle/release/app-release.aab release_assets/
          cp -r build/web release_assets/web_build
          
          cd release_assets
          zip -r web_build.zip web_build/
          cd ..

      - name: Create Git Tag and Push Changes
        run: |
          TAG_NAME="v${{ steps.final_version.outputs.final_version_string }}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml
          COMMIT_MSG="Release version $TAG_NAME"
          git commit -m "$COMMIT_MSG"
          git tag -a "$TAG_NAME" -m "$COMMIT_MSG"
          git push origin ${{ github.ref_name }}
          git push origin "$TAG_NAME"

      - name: Get Build Date
        id: get_build_date
        run: |
          echo "build_date=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Create Draft Release and Get Notes
        id: create_draft_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ steps.final_version.outputs.final_version_string }} \
            --generate-notes \
            --notes-start-tag v${{ steps.version_calc.outputs.CURRENT_VERSION }} \
            --title "Release v${{ steps.final_version.outputs.final_version_string }}" \
            --draft \
            --prerelease=${{ github.event.inputs.prerelease }}
          
          NOTES=$(gh release view v${{ steps.final_version.outputs.final_version_string }} --json body --jq .body)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Delete Draft Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release delete v${{ steps.final_version.outputs.final_version_string }} --yes

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.final_version.outputs.final_version_string }}
          body: |
            ${{ github.event.inputs.release_notes }}

            <details>
            <summary>Release Details</summary>
            
            **Release Type:** ${{ steps.version_calc.outputs.RELEASE_TYPE }}
            **Version Name:** ${{ steps.version_calc.outputs.VERSION_NAME }}
            **Build Number:** ${{ steps.final_version.outputs.build_number }}
            **Previous Version:** ${{ steps.version_calc.outputs.CURRENT_VERSION }}
            
            ### Build Information
            - Flutter Version: 3.32.5
            - Build Date: ${{ steps.get_build_date.outputs.build_date }}
            </details>

            **Changes:**
            ${{ steps.create_draft_release.outputs.notes }}
          files: |
            ./release_assets/app-release.apk
            ./release_assets/app-release.aab
            ./release_assets/web_build.zip
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}

      - name: Success Message
        run: |
          FINAL_VERSION_STRING="${{ steps.final_version.outputs.final_version_string }}"
          if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            echo "🎉 Successfully created prerelease v${FINAL_VERSION_STRING}!"
            echo "📱 Android APK and App Bundle created"
            echo "🌐 Web build created"
            echo "🏷️  Git tag v${FINAL_VERSION_STRING} created"
            echo "📦 Prerelease GitHub release created"
          else
            echo "🎉 Successfully released version v${FINAL_VERSION_STRING}!"
            echo "📱 Android APK and App Bundle created"
            echo "🌐 Web build created"
            echo "🏷️  Git tag v${FINAL_VERSION_STRING} created"
            echo "📦 Official GitHub release created"
          fi
