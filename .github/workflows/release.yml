name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type to create'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Mark as prerelease? (Creates an incremental prerelease version for next patch/minor/major version)'
        required: false
        type: boolean
        default: false
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
        default: ''

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5'
          channel: 'stable'

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.44.1/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Get build info
        id: build_info
        run: |
          echo "date=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
          echo "build_number=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Get current version and calculate new version
        id: version_calc
        run: |
          # Fetch all tags
          git fetch --tags
          
          # Find the latest official release tag (vX.Y.Z)
          LATEST_OFFICIAL_TAG=$(git tag --list 'v*' --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)
          LATEST_OFFICIAL_VERSION=${LATEST_OFFICIAL_TAG#v}
          
          # Find the latest prerelease tag for the next version (vX.Y.Z-prerelease.N)
          LATEST_PRERELEASE_TAG=$(git tag --list 'v*' --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+-prerelease\.[0-9]+$' | head -n1)
          LATEST_PRERELEASE_VERSION=${LATEST_PRERELEASE_TAG#v}
          
          # Parse dropdown and prerelease input
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          PRERELEASE="${{ github.event.inputs.prerelease }}"
          
          # Helper to bump version
          bump_version() {
            local version=$1
            local type=$2
            IFS='.' read -r MAJOR MINOR PATCH <<< "$version"
            case $type in
              major)
                MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
              minor)
                MINOR=$((MINOR + 1)); PATCH=0 ;;
              patch)
                PATCH=$((PATCH + 1)) ;;
            esac
            echo "$MAJOR.$MINOR.$PATCH"
          }
          
          if [ "$PRERELEASE" = "true" ]; then
            # Prerelease logic
            BASE_VERSION=$(bump_version "$LATEST_OFFICIAL_VERSION" "$RELEASE_TYPE")
            # Find the highest prerelease number for this base version
            EXISTING_PRERELEASE=$(git tag --list "v${BASE_VERSION}-prerelease.*" | grep -E "^v${BASE_VERSION}-prerelease\\.[0-9]+" | sort -V | tail -n1)
            if [ -n "$EXISTING_PRERELEASE" ]; then
              PRERELEASE_NUM=$(echo "$EXISTING_PRERELEASE" | sed -E 's/.*-prerelease\.([0-9]+)$/\\1/')
              PRERELEASE_NUM=$((PRERELEASE_NUM + 1))
            else
              PRERELEASE_NUM=1
            fi
            NEW_VERSION_NAME="$BASE_VERSION-prerelease.$PRERELEASE_NUM"
            NEW_FULL_VERSION="$NEW_VERSION_NAME"
          else
            # Official release logic
            # If the latest tag is a prerelease for this version, strip the suffix
            if [[ "$LATEST_PRERELEASE_VERSION" =~ ^([0-9]+\.[0-9]+\.[0-9]+)-prerelease\.[0-9]+$ ]]; then
              BASE_VERSION="${BASH_REMATCH[1]}"
              NEW_VERSION_NAME="$BASE_VERSION"
              NEW_FULL_VERSION="$BASE_VERSION"
            else
              # Otherwise, bump from latest official
              NEW_VERSION_NAME=$(bump_version "$LATEST_OFFICIAL_VERSION" "$RELEASE_TYPE")
              NEW_FULL_VERSION="$NEW_VERSION_NAME"
            fi
          fi
          
          echo "NEW_FULL_VERSION=${NEW_FULL_VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION_NAME=${NEW_VERSION_NAME}" >> $GITHUB_OUTPUT
          echo "CURRENT_VERSION=${LATEST_OFFICIAL_VERSION}" >> $GITHUB_OUTPUT
          echo "RELEASE_TYPE=${RELEASE_TYPE}" >> $GITHUB_OUTPUT

      - name: Update version in pubspec.yaml
        run: |
          NEW_FULL_VERSION="${{ steps.version_calc.outputs.NEW_FULL_VERSION }}"
          yq -i '.version = "'"${NEW_FULL_VERSION}"'."' pubspec.yaml
          echo "Updated pubspec.yaml to version $NEW_FULL_VERSION"

      - name: Build Android APK
        run: |
          flutter build apk --release --build-name=${{ steps.version_calc.outputs.VERSION_NAME }} --build-number=${{ steps.build_info.outputs.build_number }}

      - name: Build Android App Bundle
        run: |
          flutter build appbundle --release --build-name=${{ steps.version_calc.outputs.VERSION_NAME }} --build-number=${{ steps.build_info.outputs.build_number }}

      - name: Build Web
        run: |
          flutter build web --release --build-name=${{ steps.version_calc.outputs.VERSION_NAME }} --build-number=${{ steps.build_info.outputs.build_number }}

      - name: Create Release Assets
        run: |
          mkdir -p release_assets
          cp build/app/outputs/flutter-apk/app-release.apk release_assets/
          cp build/app/outputs/bundle/release/app-release.aab release_assets/
          cp -r build/web release_assets/web_build
          
          # Create a zip of web build
          cd release_assets
          zip -r web_build.zip web_build/
          cd ..

      - name: Create Git Tag and Push Changes
        run: |
          NEW_FULL_VERSION="${{ steps.version_calc.outputs.NEW_FULL_VERSION }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml
          COMMIT_MSG="Release version $NEW_FULL_VERSION"
          TAG_NAME="v$NEW_FULL_VERSION"
          git commit -m "$COMMIT_MSG"
          git tag -a "$TAG_NAME" -m "$COMMIT_MSG"
          git push origin ${{ github.ref_name }}
          git push origin "$TAG_NAME"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version_calc.outputs.NEW_FULL_VERSION }}
          release_name: Release v${{ steps.version_calc.outputs.NEW_FULL_VERSION }}
          body: |
            ## Release v${{ steps.version_calc.outputs.NEW_FULL_VERSION }}
            
            **Release Type:** ${{ steps.version_calc.outputs.RELEASE_TYPE }}
            **Version Name:** ${{ steps.version_calc.outputs.VERSION_NAME }}
            **Previous Version:** ${{ steps.version_calc.outputs.CURRENT_VERSION }}
            
            **Changes:**
            ${{ github.event.inputs.release_notes }}
            
            ### Assets
            - Android APK
            - Android App Bundle
            - Web Build
            
            ### Build Information
            - Flutter Version: 3.32.5
            - Build Date: ${{ steps.build_info.outputs.date }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          generate_release_notes: true

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release_assets/app-release.apk
          asset_name: app-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload App Bundle
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release_assets/app-release.aab
          asset_name: app-release.aab
          asset_content_type: application/octet-stream

      - name: Upload Web Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release_assets/web_build.zip
          asset_name: web_build.zip
          asset_content_type: application/zip

      - name: Success Message
        run: |
          RELEASE_TYPE="${{ steps.version_calc.outputs.RELEASE_TYPE }}"
          NEW_FULL_VERSION="${{ steps.version_calc.outputs.NEW_FULL_VERSION }}"
          if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            echo "üéâ Successfully created prerelease $NEW_FULL_VERSION!"
            echo "üì± Android APK and App Bundle created"
            echo "üåê Web build created"
            echo "üè∑Ô∏è  Git tag v$NEW_FULL_VERSION created"
            echo "üì¶ Prerelease GitHub release created"
          else
            echo "üéâ Successfully released version $NEW_FULL_VERSION!"
            echo "üì± Android APK and App Bundle created"
            echo "üåê Web build created"
            echo "üè∑Ô∏è  Git tag v$NEW_FULL_VERSION created"
            echo "üì¶ Official GitHub release created"
          fi